version: 0.1.0.{build}
environment:
  VERSION: 0.1.0
  AZ_AD_SP_ID: http://musicbotsvc
  AZ_AD_TENANT: 46947e84-c7c5-4572-bf44-0c0b2d9013b8
  AZ_AD_SP_PASS:
    secure: QBSDpMZyT8QNWCo1R8M6o7+Umvo61xZjMnRIAp2a/eM=
  AZ_LOCATION: eastus
  AZ_ARM_STORAGE_ACCOUNT_NAME: stageda864e5f18ab4628ac6
  AZ_RG_INT_PREFIX: MUSIC-BOT-INT-
  AZ_RG_DEV: MUSIC-BOT-DEV
  DEV_BRANCH_NAME: dev
  AZ_RG_PROD: MUSIC-BOT-PROD
  PROD_BRANCH_NAME: prod
  MOCHA_SLOW_THRESHOLD_MS: 1000
  MOCHA_TIMEOUT_THRESHOLD_MS: 10000
  GIT_ACCESS_TOKEN:
    secure: /8nuu389OsrB4Ylkb0aM6AsXqVTYfhqMibLEH8SZDNAEOIMPe2SiR8Im/jFX6rQ2
image: Visual Studio 2017 Preview
assembly_info:
  patch: true
  assembly_version: $(VERSION).$(APPVEYOR_BUILD_NUMBER)
  assembly_file_version: $(VERSION).$(APPVEYOR_BUILD_NUMBER)
  assembly_informational_version: $(VERSION).$(APPVEYOR_BUILD_NUMBER)
dotnet_csproj:
  patch: true
  version: $(VERSION).$(APPVEYOR_BUILD_NUMBER)
  package_version: $(VERSION)
branches:
  only:
    - master
notifications:
  - provider: Slack
    incoming_webhook:
      secure: MdVvSoK8ot0oaTh3xGuB2aPFuI64lu++kQAg0VYxdhsInJUIxOtZGwQng2wJLBMpNCl1NDnx+cooq8D945ICEe+/OsvKybd1rSWR6zPxqZA=
    on_build_failure: true
    on_build_status_changed: true
    on_build_success: false
install:
  - npm install -g mocha
  - npm install -g mocha-multi-reporters
  - npm install -g mocha-junit-reporter
  - npm install -g azure-functions-core-tools
  - npm install
build_script: 
  # Restore and build
  - nuget restore
  - msbuild MusicBot.Backend.sln /p:Configuration=Release /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"

  # Integration Test locally
  - ps: $funcDir = $(pwd).Path + '\src\func\bin\Release\Net47'
  - ps: $funcJob = Start-Job -FilePath .\test\func\Start-FuncHost.ps1 -ArgumentList $funcDir
  - ps: Start-Sleep -s 15 # give it some startup time
  - ps: Receive-Job $funcJob 2>&1
  - >
      mocha --slow %MOCHA_SLOW_THRESHOLD_MS% 
      --timeout %MOCHA_TIMEOUT_THRESHOLD_MS%
      --reporter mocha-multi-reporters
      --reporter-options configFile=test/func/mocha-multi-reporters-config.json
      test/func
  - ps: Stop-Job $funcJob

  # Upload test results
  - ps: $wc = New-Object 'System.Net.WebClient'
  - ps: $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path test-results.xml))

  # If this is a PR, we're done
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -ne $null) { Exit-AppVeyorBuild }

  # Prep for Azure integration test - push branch to github
  - git config --global credential.helper store
  - ps: Add-Content "$env:USERPROFILE\.git-credentials" "https://$($env:GIT_ACCESS_TOKEN):x-oauth-basic@github.com`n"
  - git checkout -b %AZ_RG_INT_PREFIX%%APPVEYOR_BUILD_NUMBER%
  - git push -u origin %AZ_RG_INT_PREFIX%%APPVEYOR_BUILD_NUMBER%

  # Deploy resources to Azure for integration testing
  - ps: $pass = ConvertTo-SecureString $env:AZ_AD_SP_PASS -AsPlainText -Force
  - ps: $cred = New-Object -TypeName pscredential -ArgumentList $env:AZ_AD_SP_ID, $pass
  - ps: Login-AzureRmAccount -Credential $cred -ServicePrincipal -TenantId $env:AZ_AD_TENANT
  - ps: |
      ./src/arm/Deploy-AzureResourceGroup.ps1 `
        -ResourceGroupName "$env:AZ_RG_INT_PREFIX$env:APPVEYOR_BUILD_NUMBER" `
        -ResourceGroupLocation $env:AZ_LOCATION `
        -OtherParams @{ `
          resourcePrefix = "$env:AZ_RG_INT_PREFIX$env:APPVEYOR_BUILD_NUMBER"; `
          branch = "$env:AZ_RG_INT_PREFIX$env:APPVEYOR_BUILD_NUMBER"; `
          includeSourceControlDeployment = "yes"; `
        } `
        -UploadArtifacts `
        -StorageAccountName $env:AZ_ARM_STORAGE_ACCOUNT_NAME
  - ps: if ($LastExitCode -ne 0) { throw "Azure Script did not complete successfully" }

  # Test on Azure
  - set BASE_URL=https://%AZ_RG_INT_PREFIX%%APPVEYOR_BUILD_NUMBER%-APP.azurewebsites.net/api
  - >
      mocha --slow %MOCHA_SLOW_THRESHOLD_MS% 
      --timeout %MOCHA_TIMEOUT_THRESHOLD_MS% 
      --reporter mocha-multi-reporters 
      --reporter-options configFile=test/func/mocha-multi-reporters-config.json
      test/func

  # Upload test results
  - ps: $wc = New-Object 'System.Net.WebClient'
  - ps: $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path test-results.xml))
after_build:
  - ps: if ($funcJob.State -ne 'Stopped') { Stop-Job $funcJob }
before_deploy:
  - ps: $pass = ConvertTo-SecureString $env:AZ_AD_SP_PASS -AsPlainText -Force
  - ps: $cred = New-Object -TypeName pscredential -ArgumentList $env:AZ_AD_SP_ID, $pass
  - ps: Login-AzureRmAccount -Credential $cred -ServicePrincipal -TenantId $env:AZ_AD_TENANT
deploy_script:
  # Deploy to Azure - Dev, or Prod on tag
  - ps: |
      if ($env:APPVEYOR_REPO_TAG -eq 'true' -and $env:APPVEYOR_REPO_TAG_NAME -eq 'prod') { 
        Write-Host "Deploying to Production"; 
        ./src/arm/Deploy-Environment.ps1 `
          -ResourceGroupName $env:AZ_RG_PROD `
          -ResourceGroupLocation $env:AZ_LOCATION `
          -ResourcePrefix $env:AZ_RG_PROD `
          -Branch $env:PROD_BRANCH_NAME `
          -Version "$env:VERSION.$env:APPVEYOR_BUILD_NUMBER" `
          -StorageAccountName $env:AZ_ARM_STORAGE_ACCOUNT_NAME; 
      } elseif ($env:APPVEYOR_REPO_TAG -eq 'false') { 
        Write-Host "Deploying to Dev"; 
        ./src/arm/Deploy-Environment.ps1 `
          -ResourceGroupName $env:AZ_RG_DEV `
          -ResourceGroupLocation $env:AZ_LOCATION `
          -ResourcePrefix $env:AZ_RG_DEV `
          -Branch $env:DEV_BRANCH_NAME `
          -Version "$env:VERSION.$env:APPVEYOR_BUILD_NUMBER" `
          -StorageAccountName $env:AZ_ARM_STORAGE_ACCOUNT_NAME; 
      } else { 
        Write-Host "Non-Prod tagged commit, skipping deployment." 
      }
on_finish:
  # On non-PRs, remove git and azure resources
  - ps: | 
      if ($env:APPVEYOR_PULL_REQUEST_NUMBER -ne $null) { 
         git push origin --delete $env:AZ_RG_INT_PREFIX$env:APPVEYOR_BUILD_NUMBER
         Remove-AzureRmResourceGroup -Name $env:AZ_RG_INT_PREFIX$env:APPVEYOR_BUILD_NUMBER -Force
      }